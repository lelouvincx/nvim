name: Release
# The workflow is triggerd by the following events:
# - Manually by the user
# - On a schedule every month
# - On push from the branch release-please--branches--main
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 1 * *" # every month
  pull_request:
    branches:
      - release-please--branches--main

permissions:
  contents: write
  pull-requests: write

jobs:
  stylua:
    name: Stylua Lint Check
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: JohnnyMorganz/stylua-action@v4
        with:
          token: ${{ secrets.CI_TOKEN }}
          version: latest
          args: --check lua after

  release:
    name: Release
    needs: stylua
    if: ${{ !failure() }}
    runs-on: ubuntu-24.04

    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      pr_number: ${{ steps.find_pr.outputs.pull_request_number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Config release-please
        id: release-please-config
        run: |
          if [ -f .github/release-please-config.json ]; then
            echo "config-file=.github/release-please-config.json" >> $GITHUB_OUTPUT
            [ -f .github/release-please-manifest.json ] &&
              echo "manifest-file=.github/release-please-manifest.json" >> $GITHUB_OUTPUT
            [ -f .github/.release-please-manifest.json ] &&
              echo "manifest-file=.github/.release-please-manifest.json" >> $GITHUB_OUTPUT
          else
            echo "release-type=simple" >> $GITHUB_OUTPUT
          fi
          exit 0

      - name: Release
        uses: googleapis/release-please-action@v4.2.0
        id: release
        with:
          token: ${{ secrets.CI_TOKEN }}
          config-file: ${{ steps.release-please-config.outputs.config-file }}
          manifest-file: ${{ steps.release-please-config.outputs.manifest-file }}
          release-type: ${{ steps.release-please-config.outputs.release-type }}

      # FIX: does not found major and minor version
      - name: Print release information
        run: |
          echo "Major version: ${{ steps.release.outputs.major }}"
          echo "Minor version: ${{ steps.release.outputs.minor }}"

      - name: Tag stable version
        env:
          RELEASE_MAJOR: ${{ steps.release.outputs.major }}
          RELEASE_MINOR: ${{ steps.release.outputs.minor }}
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          # Add v prefix to version numbers for consistency
          MAJOR_TAG="v${RELEASE_MAJOR}"
          MINOR_TAG="v${RELEASE_MAJOR}.${RELEASE_MINOR}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Use HTTPS URL with embedded token
          git remote set-url origin https://x-access-token:${CI_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

          # Delete existing tags if they exist
          echo "Deleting existing tags $MAJOR_TAG and $MINOR_TAG"
          git tag -d $MAJOR_TAG || true
          git tag -d $MINOR_TAG || true
          git push origin :refs/tags/$MAJOR_TAG || true
          git push origin :refs/tags/$MINOR_TAG || true

          # Create and push new tags
          echo "Creating new tags $MAJOR_TAG and $MINOR_TAG"
          git tag -a $MAJOR_TAG -m "chore(release): release $MAJOR_TAG"
          git tag -a $MINOR_TAG -m "chore(release): release $MINOR_TAG"
          git push origin $MAJOR_TAG
          git push origin $MINOR_TAG

      - name: Find the PR number
        if: ${{ steps.release.outputs.prs_created }}
        id: find_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "pull_request_number=$(gh pr list --head release-please--branches--main --json number --jq '.[0].number')" >> $GITHUB_OUTPUT

      - name: Assign github-actions[bot] to the PR
        if: ${{ steps.release.outputs.prs_created && steps.find_pr.outputs.pull_request_number != '' }}
        env:
          PR_NUMBER: ${{ steps.find_pr.outputs.pull_request_number }}
          TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          # Use the GitHub REST API directly to avoid shell escaping issues
          curl -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/assignees \
            -d '{"assignees":["github-actions[bot]"]}'
